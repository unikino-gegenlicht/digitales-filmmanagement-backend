openapi: 3.0.3
info:
  title: Digitales Kinomanagement System
  description: Digitales Kinomanagement System
  version: 1.0.0

servers:
  - description: Server
    url: "../api"

components:
  securitySchemes:
    central-idp:
      type: openIdConnect
      openIdConnectUrl: "https://accounts.gegenlicht.net/application/o/filmmanagement/.well-known/openid-configuration"
  requestBodies:
    Register:
      content:
        application/json:
          schema:
              description: A single cash register/other register type
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  title: Name
                  description: The name of the register for easy identification
                description:
                  type: string
                  title: Description
                  description: A long-text description of the register to allow further identification
                additionalProperties:
                  type: object
                  title: Additional Properties
                  description: Additional properties as key-value pairs
  schemas:
    Error:
      description: A error response
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          title: Error
          description: A short description of the error
        message:
          type: string
          title: Message
          description: A long description of the error
    Register:
      description: A single cash register/other register type
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          title: ID
          description: The UUID of the reigster for internal and API identification
          readOnly: true
        name:
          type: string
          title: Name
          description: The name of the register for easy identification
        description:
          type: string
          title: Description
          description: A long-text description of the register to allow further identification
        currentCash:
          type: number
          title: Current Cash
          description: The current amount of cash in the register
          readOnly: true
        additionalProperties:
          type: object
          title: Additional Properties
          description: Additional properties as key-value pairs
    Transaction:
      description: A single transaction stored in the database
      type: object
      required:
        - id
        - amount
        - title
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of this transaction
          readOnly: true
        title:
          type: string
          description: the title for the transaction (may be autogenerated)
        description:
          type: string
          description: A description for the transaction that may be displayed in a detailed view
        amount:
          type: number
          description: The amount of money that was added or removed from the register
        createdBy:
          type: string
          description: The full name of the person that created the transaction
paths:
  /registers/:
    description: |
      This path allows the managing of the different registers a cinema may use
    get:
      summary: Get all registers
      operationId: getRegisters
      tags:
        - registers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Register'
        '5XX':
          description: |
            A internal error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new register
      operationId: newRegister
      tags:
        - registers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
        409:
          description: |
            A register with the same name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '5XX':
          description: |
            A internal error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
  /registers/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Get information about a register
      tags:
        - registers
      operationId: getSingleRegister
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
        404:
          description: |
            A register with the supplied id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '5XX':
          description: |
            A internal error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      summary: Update a register
      description: |
        When using this endpoint, the supplied request body will overwrite
        the data of the current register. Therefore sending null values
        will result in a nulled database column.
      tags:
        - registers
      operationId: updateRegister
      requestBody:
        $ref: '#/components/requestBodies/Register'
      responses:
        '200':
          description: Update successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
        400:
          description: |
            The update could not be stored due to invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: |
            A register with the supplied id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '5XX':
          description: |
            A internal error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a register
      description: |
        When using this endpoint the register will be deleted, but all transactions
        will be kept to secure the transaction history
      tags:
        - registers
      operationId: updateRegister
      requestBody:
        $ref: '#/components/requestBodies/Register'
      responses:
        '200':
          description: Update successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
        400:
          description: |
            The update could not be stored due to invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: |
            A register with the supplied id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '5XX':
          description: |
            A internal error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /transactions:
    get:
      parameters:
        - in: query
          name: from
          schema:
            type: integer
            format: int64
          required: true

        - in: query
          name: until
          schema:
            type: integer
            format: int64
          required: false

      summary: Get a list of all transactions
      description: |
        This endpoint allows the retrieval of all transactions that were
        recorded between the `from` and `until` timestamps. If the `until`
        parameter is not supplied, all data-points between `from` and the
        current server time are returned.
      responses:
        200:
          description: |
            List of transaction items recorded between the `from` and
            `until` timestamps.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        204:
          description: No transaction in the given time range

